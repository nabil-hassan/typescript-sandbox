========================================================================================
Importing and Exporting
========================================================================================

> What is meant by global shared scope, and how can it causes issues

    - To be aware of when a Javascript or Typescript file does not explicitly export functions or variables.
    - The members of files without any exports are automatically added to the  "global shared scope"
    - This means two files without exports cannot use the same name for a variable/function :(
    
    - To resolve this issue either export members, or add  'export {}' to your file


> What is meant by a default export - how do you import such exports

    - A file can export one default member
    - This member can then be imported without the need for curly braces, and can be aliased without using 'as'

        /*======= FILE 1 =======**/
        export default function exportedFn() {
            return "I was exported from another file.";
        }

        // you can also define the default export as a separate statement
        // export default exportedFn();

        /*======= FILE 2 =======**/
        import exportedFn from "./exporter";
        import ExF from "./exporter";          // this is an alias for the above function

        console.log(exportedFn());
        console.log(ExF());

> How to import default and non-default members:

  import React, {useState} from 'react';

> What types of members can be exported and what is the syntax

    export function funcName;   // for a function
    export const variableName;  // for a variable
    export type/interface/class // for type, interface, class

> How can you export a member with a different name:

    - use the export const = approach

    const createAuthorizedContext = //.....

    export const createContext = createAuthorizedContext;

> How can you use spread with function exports

    - Have a function that exports an object with a bunch of stuff

          return {
            router: t.router,
            createAuthorizedContext,
            authorizedProcedure: t.publicProcedure
              .use(authMiddleware())
              .use(authMetadataMiddleware((ctx) => ctx.authorization)),
            paginatedProcedure: t.paginatedProcedure
              .use(authMiddleware())
              .use(authMetadataMiddleware((ctx) => ctx.authorization)),
            publicProcedure: t.publicProcedure,
          };

    - Call this function and return selected pieces of it in some other file:

        export const {
          router,
          createAuthorizedContext,
          authorizedProcedure,
          paginatedProcedure,
        } = verifyAuthMetadata<Context>(createContext);


> How do you export and import multiple members

    - The first file uses the 'export' statement before the members to export
    - In the second file use the 'import' statement, with required members placed in curly braces
    - You can alias imported members using the 'as' keyword

        /*======= FILE 1 =======**/
        export function exFn1()  { //....}
        export function exFn2()  { //....}

        export default exFn1();   // we can have a default export too

        /*======= FILE 2 =======**/
        import {exFn1, exFn2 as ExF2} from "./multi-exporter";

        console.log(exFn1());
        console.log(ExF2());


> How do you import all members from a file

    - This is called a "namespace import"
    - Use import *

        import * as foo from './otherClass';
        foo.exportedFn()


> How do you import methods from node_modules and other locations - which paths are scanned for imported members

     - The imports shown above use relative paths to members contained in files within the same project
     - Node.JS automatically scans the 'node_modules' directory within the project root.
     - Thus, you could use a relative path like: `import * as express from 'express/express.js'`

     - You can also ask it to check additional directories using the NODE_PATH environment variable.
     - N.B. directories must be separated via a colon e.g 'export NODE_PATH="/tmp/node1:/tmp/node2"'
     - Again, you can use relative paths for any directories included in this variable
     - For example, to import /tmp/node1/hello.js you could simply use: `import * as n1 from 'hello.js'`

> How can you explicitly add something to the global scope:

    - Members of a file are added to the global scope if that file contains no exports
    - However if your file contains exports and you still want to add something to the global scope, use the following:

        declare global {
            var prisma: PrismaClient | undefined;
        }

    - Thus whenever you reference prisma in code it will pick it from global scope