============================================================================================
Type narrowing
============================================================================================

> What does the typeof operator return

    - undefined, string, number, boolean, object
    - nb null, array and object are all considered 'objects'


> How can you check whether a variable is null, defined, or empty - how can you check for the inverse - what is this called

    - this is known as truthiness/falsiness
    - the falsiness statement if (!var) checks if variable is undefined, null, false, or a string with length = 0:
    - the truthiness statement 'if (var)'' is true if the inverse of above - if a string has one space character it is true
    - see 02-truthiness.ts for example


> How can you do an 'instanceof' type check:

    - to check the Javascript type, use typeof: return string, boolean, number, object etc
    
    - if the variable is built using a class, you can use instanceof:

          if (invoice instanceof SalesInvoices) {

    - for a type however, you need to use this        

        if (server.address() as AddressInfo !== undefined) {
            // we can assume server.address() can be converted to AddressInfo    
        }

    - or this appraoch using 'is':

        function isValidInvoice(invoice: Invoice): invoice is SalesInvoices {
            return invoice.amount > 100 && invoice.country === "ES";
        }

        // the code looks clean.
        invoicesToProcess.forEach((invoice) => {
        if (isValidInvoice(invoice)) {
            console.log(invoice);
        }
        });    


> How can you achieve the Java access via cast recipe ((Customer)c).getRegion()

        // approach 1    
        let status = ex instanceof TRPCClientError ? ex.data.httpStatus : undefined;      

        // approach 2
        let x: unknown = 'hello';
        console.log((x as string).length);          

        // approach 3
        let x: unknown = 'hello';
        console.log((<string>x).length);

        // approach 4: overcomes typechecking errors
        let x = 'hello';
        console.log(((x as unknown) as number).length); // x is not actually a number so this will return undefined

> What is the equivalent to the type wildcard ? in Java

    - any

        let clientEx = ex as TRPCClientError<any>;


> If a variable can have multiple types, how do you cast it

    - use the as keyword:

            let addressInfo = server.address() as AddressInfo;


> Difference between equals and triple equals via example

    - '===' returns true only if the type and value match
    - '==' returns true if value matches
    - e.g. if (9 == "9") returns true, whereas (9 === "9") returns false


> What is the purpose of the 'in' operator

    - returns true if an object has the specified property

        console.assert("name" in {"name" : "Jon", "occupation" : "king"});


> What limitations does the 'instanceof' operator have:

    - it can only be used for classes and arrays
    - it cannot be used for primitive types or interfaces :(

        console.log(new Animal("Simba") instanceof Animal);
        console.log(["1", "2", "3"] instanceof Array);


> What limitation can user-defined type guards allegedly overcome - is this feasible:

    - allegedly can be used to check whether something is an instance of an interface
    - however this approach is flawed and does not work correctly
    - see 03-instanceof for a worked example


> What are discriminated unions

    - another approach to implementing an instanceof check for interfaces
    - more appropriate but also prone to developer error
    - see 03-instanceof for a worked example