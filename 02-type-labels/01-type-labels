============================================================================================
TYPE ANNOTATIONS
============================================================================================

1. What are type labels

    - type labels (aka type annotations) are specified using ":" after a variable name
    - once a type is assigned to a variable 'v' the values assigned to 'v' must be of the same type
    - the assignment on the 2nd line below is ILLEGAL

        let str_var:string = "hello world"; let num_var:number = 99; let bool_var:boolean = false;
        str_var=101;


2. What is type inference

    - type inference means typescript can automatically detect variable types if a value is assigned
    - notice the lack of type labels
    - again, the assignment on the 2nd line is ILLEGAL

        let str_var_inferred = "hello world"; 
        let num_var_inferred = 99; 
        let bool_var_inferred = false;
        bool_var_inferred="Foo-bool";


3. Do Typescript variables really have to be of a specific type?

    - the 'any' type means any type can be assigned to a variable
    - notice the assignment on the second line is now made LEGAL

        let any_var:any = "I am flexible";
        any_var = false;

    - you can also use union types via the pipe symbol
    - this block of code is valid - you can reassign the variable as a different type :(

        let foo:string|number; 
        foo = 99;
        foo = "hello";

4. In what circumstances can you not rely on type inference

    - you cannot rely on type inference when using delayed initialisation, as typescript infers 'any' as the type of v
    - in the example below, even though we intend for the var to be a string, it is changed to a boolean on line 3
    - thus, we should always type label any such variables beforehand

        let delayed_var;
        delayed_var = Math.random() < 0.5 ? "Less" : "More";
        delayed_var = false;


5. How can you represent arrays with labels:

    - you can use one square braces or array
    - Notice the second form requires you to upper case primitive types i.e. Array<String> not Array<string>

        let a1:string[]       = ["Bob", "Job", "Gob"]; 
        let a2:Array<String>  = ["Mob", "Sob"]; 

6. What is 'Unknown' and how is it different from any:

    - TypeScript 3.0 introduced a new unknown type which is the type-safe counterpart of the any type.

    - The main difference between unknown and any is that unknown is much less permissive than any:
      we have to do some form of checking before performing most operations on values of type unknown,
      whereas we don't have to do any checks before performing operations on values of type any.

    - The following would be possible using any, but are forbidden using unknown:

        let value: unknown;
        value.foo.bar; // Error - we can't trust it has those properties
        value.trim(); // Error - we can't trust it has that method
        value(); // Error - we can't trust it is a function

    - The safest way to use unknowns is to type check them using typeof, instanceof and "if (x as type !== undefined)"
    - See earlier notes for examples of type checking

7. What are 'type assertions'

    - using "as" - be careful, it tells Typescript to trust you that you know the type
    - if the type is wrong as per below, a runtime error is thrown!

    let x:unknown = 99;
    ((x as string)).trim()