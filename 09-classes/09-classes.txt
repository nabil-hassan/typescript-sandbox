============================================================================================
CLASSES
============================================================================================

Class fields/properties can be defined in two ways - illustrate both

    - fields can be defined at class level or inferred via the constructor
    - if using constructor inference, the access modifier for the arguments must be specified

        // define a class with fields explicitly specified
        class Thing {
            score = 0; id: number; name: string;

            constructor(id: number, name: string) {
                this.id = id;
                this.name = name;
            }
        }

        // define a class that uses constructor inference to provide equivalent form of above
        class InferredThing {
            score = 0;

            constructor(public id: number, public name: string) {
                this.id = id;
                this.name = name;
            }
        }


What 4 access modifiers does Javascript have - illustrate each and identify what the default access level is

    - public, private, readonly, protected
    - if you exclude these keywords, the default is public, non-readonly
    - protected applies to subclasses, meaning they can access their parents properties


Illustrate how to use abstract classes and interfaces

    - see example below
    - if a class defines an abstract method, it must be defined abstract

        abstract class Animal {
            protected name: string;
            constructor(name: string) {this.name = name;}

            abstract type() : string;
        }

        class Cat extends Animal {
            type(): string {
                return "Cat";
            }

        }

        // notice the implicit call to  Animal's constructor - we didn't need to explicitly define a constructor in Cat
        let cat : Cat = new Cat("Mittens");