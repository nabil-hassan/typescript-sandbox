============================================================================================
Generic Functions
============================================================================================

> Write a generically typed function which can take a single argument of any type and simply return it

    function returnTheValue<T>(source : T):T {
        return source;
    }


> Write a generically typed function which takes an array of any type and returns a random value from it

    function returnRandomElement<T>(source: Array<T>): T {
        let rand: number = Math.floor(Math.random() * source.length);
        return source[rand];
    }

    function returnRandomElementV2<T>(source: T[]): T {
        let rand: number = Math.floor(Math.random() * source.length);
        return source[rand];
    }


> How do you apply type bounds to generic parameters

    - use 'extends' as per Java

        function printAPerson<T extends Person>(t: T) {
            console.log(t.age + ":" + t.name);
        }